package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.entity.Account;
import ca.jrvs.apps.trading.entity.Trader;
import net.bytebuddy.pool.TypePool;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;


@Service
public class TraderAccountService {
    private TraderDao traderDao;
    private AccountDao accountDao;
    private SecurityOrderDao securityOrderDao;
    private PositionDao positionDao;
    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao, SecurityOrderDao securityOrderDao, PositionDao positionDao){
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.securityOrderDao = securityOrderDao;
    }
    /**
     * Create a new trader and initialize a new account with 0 amount
     * - validate user input (all fields must be non empty)
     * - create a trader
     * - create an account
     * - create, setup, and return a new traderAccountView
     *
     * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
     *
     * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not null
     */
    public TraderAccountView createTraderAndAccount(Trader trader) {

        this.isEmptyFields(trader);

        Trader traderDBObject  = traderDao.save(trader);

        Account newAccount = new Account();
        newAccount.setTraderId(traderDBObject.getId());
        newAccount.setAmount(0);

        Account accountDBObject = accountDao.save(newAccount);

        return new TraderAccountView(accountDBObject,traderDBObject);
    }

    private void isEmptyFields(Trader trader){
        if (trader.getCountry() == null || trader.getDob() == null || trader.getFirst_name() == null || trader.getLast_name() == null || trader.getEmail() == null){
            throw new IllegalArgumentException("Error: Null fields detected");
        }
    }
    /**
     * A trader can be deleted if and only if it has no open position and 0 cash balance
     * - validate traderId
     * - get trader account by traderId and check account balance
     * - get positions by accountId and check positions
     * - delete all securityOrders, account, trader (in this order)
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to delete
     */
    public void deleteTraderById(Integer traderId) {
        //TODO
        if(traderId == null){
            throw new IllegalArgumentException("Error: Parameter traderId provided is invalid");
        }
        else if (traderDao.existsById(traderId)){
            throw new IllegalArgumentException("Error: TraderId is not found");
        }

        Optional<Account> traderAccount = accountDao.findByTraderId(traderId);
        Account account = traderAccount.get();

        if(account.getAmount() != 0){
            throw new IllegalArgumentException("Error: Insufficient Balance to be allowed to delete.");
        }

        long amountOfPositions = securityOrderDao.countByAccountId(account.getId()) - positionDao.countByAccountId(account.getId());

        if(amountOfPositions>0){
            throw new IllegalArgumentException("Error: Trader has positions that are currently opened.");
        }

        //Deletion
        securityOrderDao.deleteAllByAccountId(account.getId());
        accountDao.deleteByTraderId(traderId);
        traderDao.deleteById(traderId);
    }



    /**
     * Deposit a fund to an account by traderId
     * - validate user input
     * - find account by trader id
     * - update the amount accordingly
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found,
     * 									and fund is less than or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {
        if(traderId == null){
            throw new IllegalArgumentException("Error: Parameter traderId provided is invalid");
        }
        if(fund<=0){
            throw new IllegalArgumentException("Fund is less than or equal to 0");
        }
        Optional<Account> traderAccount = accountDao.findByTraderId(traderId);
        if(traderAccount.isPresent()){
            Account account = traderAccount.get();

            double updatedBalance = account.getAmount();
            updatedBalance = updatedBalance + fund;
            account.setAmount(updatedBalance);
            return accountDao.save(account);
        }
        else{
            throw new IllegalArgumentException("TraderID: " + traderId + " not found in accounts.");
        }


    }

    /**
     * Withdraw a fund to an account by traderId
     * - validate user input
     * - find account by trader id
     * - update the amount accordingly
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found,
     * 									and fund is less than or equal to 0
     */
    public Account withdraw(Integer traderId, Double fund) {
        if(traderId == null){
            throw new IllegalArgumentException("Error: Parameter traderId provided is invalid");
        }
        if(fund<=0){
            throw new IllegalArgumentException("Fund is less than or equal to 0");
        }
        Optional<Account> traderAccount = accountDao.findByTraderId(traderId);
        if(traderAccount.isPresent()){
            Account account = traderAccount.get();

            double updatedBalance = account.getAmount();

            if(updatedBalance - fund < 0){
                throw new IllegalArgumentException("Insuffucient funds. Cannot withdraw without going into negatives.");
            }
            updatedBalance = updatedBalance - fund;
            account.setAmount(updatedBalance);
            return accountDao.save(account);
        }
        else{
            throw new IllegalArgumentException("TraderID: " + traderId + " not found in accounts.");
        }
    }
}
